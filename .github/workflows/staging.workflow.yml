name: staging

# Controls when the workflow will run
on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]
  
env:
  DOCKER_USER: ${{secrets.DOCKER_USER}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  SSH_HOST: ${{secrets.SSH_HOST}}
  SSH_KEY: ${{secrets.SSH_KEY}}
  SSH_USERNAME: ${{secrets.SSH_USERNAME}}
  APIDEV_ENV: ${{secrets.APIDEV_ENV}}
  CLIENTDEV_ENV_FILE: ${{secrets.STAGING_CLIENT_ENV}}
  STAGING_ENV_FILE: ${{secrets.STAGING_ENV_FILE}}

jobs:
  test-api:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.X]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: |
          cd api
          echo "$APIDEV_ENV" > .env
          yarn install --frozen-lockfile
          yarn lint
          echo ${GITHUB_SHA}
        shell: bash
  
  test-client:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          node-version: [16.X]
    steps:
        - uses: actions/checkout@v2
        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v1
          with:
            node-version: ${{ matrix.node-version }}

        - run: |
            cd client
            echo "$CLIENTDEV_ENV_FILE" > .env
            yarn install --frozen-lockfile
            yarn lint
            yarn build
          shell: bash
          env:
            APIDEV_ENV: ${{secrets.CLIENTDEV_ENV_FILE}}
  # publish-api:
  #   needs: test-api
  #   runs-on:  ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: docker login
  #       run: |
  #         docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  #     - name: Get current date # get the date of the build
  #       id: date
  #       run: echo "::set-output name=date::$(date +'%Y-%m-%d-%M-%S')"
  #     - name: Build api image
  #       run: |
  #         docker build api --file ./api/Dockerfile.staging --tag $DOCKER_USER/api-dev:${{ steps.date.outputs.date }}
  #     - name: Push the api image to registry
  #       run: docker push $DOCKER_USER/api-dev:${{ steps.date.outputs.date }}

  # publish-client:
  #   needs: test-client
  #   runs-on:  ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: docker login
  #       run: |
  #         docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  #     - name: Get current date # get the date of the build
  #       id: date
  #       run: echo "::set-output name=date::$(date +'%Y-%m-%d-%M-%S')"
  #     - name: Build api image
  #       run: |
  #         docker build api --file ./api/Dockerfile.staging --tag $DOCKER_USER/api-client:${{ steps.date.outputs.date }}
  deploy-staging:
    # needs:
    #   - publish-api
    #   - publish-client
    runs-on:  ubuntu-latest

    steps:
      - name: Copy Dockerfile to staging
        uses: appleboy/scp-action@master
        with:
          host: $SSH_HOST
          key: $SSH_KEY
          username: $SSH_USERNAME
          source: 'docker-compose.yml'
          target: '/root/findyspace/staging'
          rm: true
      - name: Deploy the all the 
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: $SSH_HOST
          key: $SSH_KEY
          username: $SSH_USERNAME

          script: |
            echo "Pulling images from registry..."
            cd /root/findyspace/staging
            echo "$STAGING_ENV_FILE" > .env
            

